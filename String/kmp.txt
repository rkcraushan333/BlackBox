// KMP Algorithm
    vector<int>prefGen(string pattern)
    {
        int n = pattern.size();
        vector<int>v(n);
        int i=0,j=1;
        while(j<pattern.size())
        {
            if(pattern[i]==pattern[j])
            {
                v[j] = v[j-1]+1;
                i++; j++;
            }
            else
            {
                while(i>0&&(pattern[i]!=pattern[j]))
                {
                    i = v[i-1];
                }
                if(pattern[i]==pattern[j])
                {
                    v[j] = i+1;
                    i++;
                }
                j++;
            }
        }
        return v;
    }

    int kmp(string str,string pattern)
    {
        int n = str.size(),m = pattern.size();
        vector<int>pre = prefGen(pattern);
        int i=0,j=0;
        while(i<str.size()&&j<pattern.size())
        {
            if(str[i]==pattern[j])
            {
                i++; j++;
            }
            else
            {
                if(j!=0)
                {
                    j = pre[j-1];
                }
                else
                {
                    i++;
                }
            }
        }
        if(j==pattern.size()) return i-m;
        return -1;
    }
