// using priority queue
// implementing for 1 based index
vector<int> dijkstra(vector<vector<pair<int,int>>>&adj,int source)
{
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({0,source});
    int n = adj.size();
    vector<int>dj(n+1,1e9);
    dj[source] = 0;
    while(!pq.empty())
    {
        auto p = pq.top(); pq.pop();
        int wt = p.first;
        int node = p.second;
        for(auto j:adj[node])
        {
            if(dj[j.first]>j.second+wt)
            {
                dj[j.first] = j.second+wt;
                pq.push({j.second+wt,j.first});
            }   
        }
    }
    return dj;
}

// using set
// implementing for 1 based index
vector<int> dijkstra(vector<vector<pair<int,int>>>&adj,int source)
{
    int n = adj.size();
    set<pair<int,int>>st;
    st.insert({0,source});
    vector<int>dj(n+1,1e9);
    dj[source] = 0;
    while(st.size())
    {
        auto p = *st.begin();
        st.erase(p);
        int wt = p.first;
        int node = p.second;
        for(auto j:adj[node])
        {
            if(dj[j.first]>j.second+wt)
            {
                if(st.count({dj[j.first],j.first}))
                    st.erase({dj[j.first],j.first});
                dj[j.first] = j.second+wt;
                st.insert({j.second+wt,j.first});
            }
        }
    }
    return dj;
}
